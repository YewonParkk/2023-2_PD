{"ast":null,"code":"var _jsxFileName = \"/Users/yewon/PycharmProjects/2023-2_PD 2/frontend/src/chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport './chat.css'; // 스타일 파일 가져오기\nimport { useNavigate } from \"react-router-dom\";\nimport backlogo from './img/backlogo.svg';\nimport mainimg from './img/mainimg.png';\nimport TypingIndicator from \"./TypingIndicator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"AI Chatbot\",\n    message: \"안녕하세요! 의약품 도움 챗봇 의약이에요! 원하는 의약품을 검색해 보세요?\"\n  }]);\n  const navigate = useNavigate();\n  const [input, setInput] = useState(\"\");\n  const apiKey = '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';\n  const [isSending, setIsSending] = useState(false);\n  const chatContentRef = useRef(null);\n  const [itemName, setItemName] = useState(\"\");\n  const [efcyQesitm, setEfcyQesitm] = useState(\"\");\n  const [useMethodQesitm, setUseMethodQesitm] = useState(\"\");\n  const fetchData = async () => {\n    try {\n      if (isSending) {\n        return; // 이미 다른 요청을 처리 중이면 중복 호출 방지\n      }\n\n      setIsSending(true);\n      const serviceKey = \"3Hd44nU1oacpmj6tlcnrVUlBcPv%2FwvnBhtVClAa5OA3riQo7p1cdMcG5foYMJzxTdPmmX2eOq3oZrB5zTZdEfg%3D%3D\";\n      const itemNameEncoded = encodeURIComponent(input);\n      const url = `http://apis.data.go.kr/1471000/DrbEasyDrugInfoService/getDrbEasyDrugList?serviceKey=${serviceKey}&itemName=${itemNameEncoded}&type=json`;\n      const response = await fetch(url);\n      const data = await response.json();\n      const firstItem = data.body.items[0];\n      setItemName(firstItem.itemName);\n      setEfcyQesitm(firstItem.efcyQesitm);\n      setUseMethodQesitm(firstItem.useMethodQesitm);\n    } catch (error) {\n      console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\n    } finally {\n      setIsSending(false); // 요청이 완료되면 상태를 원래대로 복구\n      await fetchGPTResponse(); // fetchData 완료 후에 fetchGPTResponse 호출\n    }\n  };\n\n  const fetchGPTResponse = async () => {\n    try {\n      const userInput = input.trim();\n      if (userInput === \"\") {\n        return;\n      }\n\n      // GPT 호출 전에 최신 데이터로 메시지 업데이트\n      addMessage(\"User\", userInput);\n      addMessage(\"AI Chatbot\", /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 32\n      }, this));\n      const data = {\n        model: 'gpt-4',\n        temperature: 0.5,\n        n: 1,\n        user: \"user123456\",\n        messages: [{\n          role: 'system',\n          content: \"너는 의약품 안내 ai 챗봇이야.\"\n        }, {\n          role: 'user',\n          content: `약이름 ${itemName} 효능 ${efcyQesitm} 사용방법 ${useMethodQesitm} 에 대해서 그대로 알려줘`\n        }]\n      };\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + apiKey,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      const responseData = await response.json();\n      const gptResponse = responseData.choices[0].message.content;\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages];\n        const typingMessageIndex = updatedMessages.findIndex(msg => msg.sender === \"AI Chatbot\" && typeof msg.message === \"object\");\n        if (typingMessageIndex !== -1) {\n          updatedMessages[typingMessageIndex] = {\n            sender: \"AI Chatbot\",\n            message: gptResponse\n          };\n        }\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error(error);\n      addMessage(\"AI Chatbot\", \"죄송해요, 에러가 발생했어요.\");\n    }\n  };\n  const scrollToBottom = () => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  };\n  const addMessage = (sender, message) => {\n    const newMessage = {\n      sender,\n      message\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    scrollToBottom();\n  };\n  const handleSendMessage = async () => {\n    if (isSending) {\n      return;\n    }\n    setIsSending(true);\n    const userInput = input.trim();\n    if (userInput === \"\") {\n      setIsSending(false);\n      return;\n    }\n\n    // 사용자가 엔터를 입력했을 때에만 fetchData 호출\n    await fetchData();\n    setInput(\"\");\n    setIsSending(false);\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleInputKeyPress = event => {\n    if (event.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n  useEffect(() => {\n    const adjustChatContentHeight = () => {\n      const chatContent = chatContentRef.current;\n      const windowHeight = window.innerHeight;\n      const chatContentTop = chatContent.getBoundingClientRect().top;\n      const newHeight = windowHeight - chatContentTop;\n      chatContent.style.height = newHeight - 45 + 'px';\n      scrollToBottom();\n    };\n    window.addEventListener('resize', adjustChatContentHeight);\n    adjustChatContentHeight();\n    return () => {\n      window.removeEventListener('resize', adjustChatContentHeight);\n    };\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-backcolor\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"back-logo\",\n        src: backlogo,\n        width: \"30px\",\n        height: \"35px\",\n        onClick: () => {\n          navigate('/');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat-name\",\n        children: \"\\uC758\\uC57D\\uC774\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat-main-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      ref: chatContentRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `chat-box ${message.sender === \"User\" ? \"user-message\" : \"ai-message\"}`,\n          children: typeof message.message === \"string\" ? message.message : /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 72\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"chat-box\",\n      id: \"input\",\n      value: input,\n      onChange: handleInputChange,\n      onKeyPress: handleInputKeyPress,\n      placeholder: \"\\uAD81\\uAE08\\uD55C \\uBAA8\\uB4E0 \\uAC83\\uC744 \\uBB3C\\uC5B4\\uBCF4\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"0D1n/L8oVLCZioWh2YVjb9jEJu0=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","backlogo","mainimg","TypingIndicator","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","sender","message","navigate","input","setInput","apiKey","isSending","setIsSending","chatContentRef","itemName","setItemName","efcyQesitm","setEfcyQesitm","useMethodQesitm","setUseMethodQesitm","fetchData","serviceKey","itemNameEncoded","encodeURIComponent","url","response","fetch","data","json","firstItem","body","items","error","console","fetchGPTResponse","userInput","trim","addMessage","fileName","_jsxFileName","lineNumber","columnNumber","model","temperature","n","user","role","content","method","headers","JSON","stringify","responseData","gptResponse","choices","prevMessages","updatedMessages","typingMessageIndex","findIndex","msg","scrollToBottom","current","scrollTop","scrollHeight","newMessage","handleSendMessage","handleInputChange","event","target","value","handleInputKeyPress","key","adjustChatContentHeight","chatContent","windowHeight","window","innerHeight","chatContentTop","getBoundingClientRect","top","newHeight","style","height","addEventListener","removeEventListener","children","className","src","width","onClick","ref","map","index","id","onChange","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["/Users/yewon/PycharmProjects/2023-2_PD 2/frontend/src/chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport './chat.css'; // 스타일 파일 가져오기\nimport { useNavigate } from \"react-router-dom\";\nimport backlogo from './img/backlogo.svg';\nimport mainimg from './img/mainimg.png';\nimport TypingIndicator from \"./TypingIndicator\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([\n    {\n      sender: \"AI Chatbot\",\n      message: \"안녕하세요! 의약품 도움 챗봇 의약이에요! 원하는 의약품을 검색해 보세요?\",\n    },\n  ]);\n\n  const navigate = useNavigate();\n\n  const [input, setInput] = useState(\"\");\n  const apiKey = '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';\n  const [isSending, setIsSending] = useState(false);\n\n  const chatContentRef = useRef(null);\n\n  const [itemName, setItemName] = useState(\"\");\n  const [efcyQesitm, setEfcyQesitm] = useState(\"\");\n  const [useMethodQesitm, setUseMethodQesitm] = useState(\"\");\n\n  const fetchData = async () => {\n    try {\n      if (isSending) {\n        return; // 이미 다른 요청을 처리 중이면 중복 호출 방지\n      }\n\n      setIsSending(true);\n\n      const serviceKey = \"3Hd44nU1oacpmj6tlcnrVUlBcPv%2FwvnBhtVClAa5OA3riQo7p1cdMcG5foYMJzxTdPmmX2eOq3oZrB5zTZdEfg%3D%3D\";\n      const itemNameEncoded = encodeURIComponent(input);\n\n      const url = `http://apis.data.go.kr/1471000/DrbEasyDrugInfoService/getDrbEasyDrugList?serviceKey=${serviceKey}&itemName=${itemNameEncoded}&type=json`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      const firstItem = data.body.items[0];\n\n      setItemName(firstItem.itemName);\n      setEfcyQesitm(firstItem.efcyQesitm);\n      setUseMethodQesitm(firstItem.useMethodQesitm);\n\n    } catch (error) {\n      console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\n    } finally {\n      setIsSending(false); // 요청이 완료되면 상태를 원래대로 복구\n      await fetchGPTResponse(); // fetchData 완료 후에 fetchGPTResponse 호출\n    }\n  };\n\n  const fetchGPTResponse = async () => {\n    try {\n      const userInput = input.trim();\n\n      if (userInput === \"\") {\n        return;\n      }\n\n      // GPT 호출 전에 최신 데이터로 메시지 업데이트\n      addMessage(\"User\", userInput);\n      addMessage(\"AI Chatbot\", <TypingIndicator />);\n   \n      const data = {\n        model: 'gpt-4',\n        temperature: 0.5,\n        n: 1,\n        user: \"user123456\",\n        messages: [\n          { role: 'system', content: \"너는 의약품 안내 ai 챗봇이야.\" },\n          { role: 'user', content: `약이름 ${itemName} 효능 ${efcyQesitm} 사용방법 ${useMethodQesitm} 에 대해서 그대로 알려줘` },\n        ],\n      };\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + apiKey,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const responseData = await response.json();\n\n      const gptResponse = responseData.choices[0].message.content;\n\n      setMessages((prevMessages) => {\n        const updatedMessages = [...prevMessages];\n        const typingMessageIndex = updatedMessages.findIndex(\n          (msg) => msg.sender === \"AI Chatbot\" && typeof msg.message === \"object\"\n        );\n\n        if (typingMessageIndex !== -1) {\n          updatedMessages[typingMessageIndex] = {\n            sender: \"AI Chatbot\",\n            message: gptResponse,\n          };\n        }\n\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error(error);\n      addMessage(\"AI Chatbot\", \"죄송해요, 에러가 발생했어요.\");\n    }\n  };\n\n\n  const scrollToBottom = () => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  };\n\n  const addMessage = (sender, message) => {\n    const newMessage = { sender, message };\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    scrollToBottom();\n  };\n\n  const handleSendMessage = async () => {\n    if (isSending) {\n      return;\n    }\n\n    setIsSending(true);\n\n    const userInput = input.trim();\n\n    if (userInput === \"\") {\n      setIsSending(false);\n      return;\n    }\n\n    // 사용자가 엔터를 입력했을 때에만 fetchData 호출\n    await fetchData();\n\n    setInput(\"\");\n    setIsSending(false);\n  };\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleInputKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n\n  useEffect(() => {\n    const adjustChatContentHeight = () => {\n      const chatContent = chatContentRef.current;\n      const windowHeight = window.innerHeight;\n      const chatContentTop = chatContent.getBoundingClientRect().top;\n      const newHeight = windowHeight - chatContentTop;\n      chatContent.style.height = newHeight - 45 + 'px';\n      scrollToBottom();\n    };\n\n    window.addEventListener('resize', adjustChatContentHeight);\n    adjustChatContentHeight();\n\n    return () => {\n      window.removeEventListener('resize', adjustChatContentHeight);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  return (\n    <div>\n      <div className=\"top-backcolor\">\n        <img className=\"back-logo\" src={backlogo} width='30px' height='35px' onClick={() => { navigate('/'); }}></img>\n        <span className=\"chat-name\">의약이</span>\n        <span className=\"chat-main-img\">\n          {/* <img className=\"chat-main\" src={mainimg} width='40px' alt=\"AI\"></img> */}\n        </span>\n      </div>\n      <div className=\"chat-content\" ref={chatContentRef}>\n        {messages.map((message, index) => (\n          <div className=\"line\" key={index}>\n            <span className={`chat-box ${message.sender === \"User\" ? \"user-message\" : \"ai-message\"}`}>\n              {typeof message.message === \"string\" ? message.message : <TypingIndicator />}\n            </span>\n          </div>\n        ))}\n      </div>\n      <input\n        className=\"chat-box\"\n        id=\"input\"\n        value={input}\n        onChange={handleInputChange}\n        onKeyPress={handleInputKeyPress}\n        placeholder=\"궁금한 모든 것을 물어보세요\"\n      />\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}